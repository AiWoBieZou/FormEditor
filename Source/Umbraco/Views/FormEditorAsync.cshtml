@using FormEditor;
@using FormEditor.Rendering;
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
  Layout = null;

  // get the form model (named "form" on the content type)
  var form = Model.Content.GetPropertyValue<FormModel>("form");
}
<!DOCTYPE html>
<html>
<head>
  <title>@Model.Content.Name</title>
  <link rel="stylesheet" href="http://getbootstrap.com/dist/css/bootstrap.min.css" />
</head>
<body ng-app="formEditor">
  <form ng-controller="FormController" name="form" novalidate ng-cloak>
    <div class="container">
      @foreach(var page in form.Pages)
      {
        <div ng-show="isActivePage(@(form.Pages.IndexOf(page)))">
          @foreach(var row in page.Rows)
          {
            <div class="row @row.Alias">
              @foreach(var cell in row.Cells)
              {
                <div class="cell @cell.Alias">
                  @foreach(var field in cell.Fields)
                  {
                    // render the form field with a partial view
                    // - the view is expected to be located at /Views/Partials/FormEditor/FieldsAsync/[field type].cshtml, e.g. /Views/Partials/FormEditor/FieldsAsync/core.checkbox.cshtml
                    @Html.Partial(string.Format(@"FormEditor/FieldsAsync/{0}", field.Type), field)
                  }
                </div>
              }
            </div>
          }
        </div>
      }
      @* paging links *@
      <nav>
        <ul class="pager">
          <li class="previous" ng-hide="isFirstPage()">
            <a href ng-click="goToPreviousPage()">
              <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span> @Umbraco.Coalesce(Umbraco.GetDictionaryValue("form.paging.previous"), "Previous")
            </a>
          </li>
          <li class="next" ng-hide="isLastPage()">
            <a href ng-click="goToNextPage()">
              @Umbraco.Coalesce(Umbraco.GetDictionaryValue("form.paging.next"), "Next") <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            </a>
          </li>
        </ul>
      </nav>
      @* form validation errors container (for cross field validations) *@
      <div class="form-group">
        <div id="validationErrors" class="alert alert-danger hide" ng-class="{show: invalidValidations.length > 0}">
          <h4>
            <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
            @Umbraco.Coalesce(Umbraco.GetDictionaryValue("form.validationerrors.header"), "Form contains errors")
          </h4>
          <ul id="validationErrorsList">
            <li ng-repeat="validation in invalidValidations">{{validation.errorMessage}}</li>
          </ul>
        </div>
      </div>
    </div>

    @* add this if you want a live view of the form data *@
    @*<hr/>
      <pre>{{formData}}</pre>*@
  </form>
  
  @* include AngularJS *@
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js"></script>

  @* include Form Editor script for asynchronous postback (using AngularJS) *@
  <script src="/JS/FormEditor/FormEditorAsync.js" type="text/javascript"></script>

  @* this script section sets up state for the JS *@
  <script type="text/javascript">
    @*
      default values for form fields
    *@
    var _formDefaultValues = {};
    @foreach(var field in form.AllValueFields().Where(f => f.HasDefaultValue()))
    {
      @:_formDefaultValues.@field.FormSafeName = @field.DefaultValue();
    }

    @*
      form validations as an array of JSON objects
    *@
    var _formValidations = @form.Validations.Render();

    @*
      the Umbraco ID of the content to where the form should be submitted to
    *@
    var _formId = @Model.Content.Id;

    @*
      the total number of form pages
    *@
    var _formTotalPages = @form.Pages.Count();
  </script>
</body>
</html>
