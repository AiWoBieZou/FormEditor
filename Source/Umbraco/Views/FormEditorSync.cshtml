@using FormEditor;
@using FormEditor.Rendering
@using FormEditor.Validation.Conditions;
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
  Layout = null;

  // get the form model (named "form" on the content type)
  var form = Model.Content.GetPropertyValue<FormModel>("form");
  
  // handle form submission if this is a postback
  // - this will also take care of redirecting to the success page (if configured)
  var formWasSubmitted = form.CollectSubmittedValues();
}
<!DOCTYPE html>
<html>
<head>
  <title>@Model.Content.Name</title>
  <link rel="stylesheet" href="http://getbootstrap.com/dist/css/bootstrap.min.css" />
</head>
<body>
  @if(formWasSubmitted == true && string.IsNullOrWhiteSpace(form.ReceiptHeader) == false)
  {
    <div class="container">
      <h2>@form.ReceiptHeader</h2>
      <p>
        @Html.Raw(Umbraco.ReplaceLineBreaksForHtml(form.ReceiptBody ?? string.Empty))
      </p>
    </div>
  }
  else
  {
    <form method="POST" enctype="multipart/form-data" novalidate>
      <div class="container">
        @* NOTE: if you're not using form pages, you can access all form rows directly with form.Rows *@
        @foreach(var page in form.Pages)
        {
          <div class="form-page" style="@(page == form.Pages.First() ? null : "display:none;")">
            @foreach(var row in page.Rows)
            {
              <div class="row @row.Alias">
                @foreach(var cell in row.Cells)
                {
                  <div class="cell @cell.Alias">
                    @foreach(var field in cell.Fields)
                    {
                      // render the form field with a partial view
                      // - the view is expected to be located at /Views/Partials/FormEditor/FieldsSync/[field type].cshtml, e.g. /Views/Partials/FormEditor/FieldsSync/core.checkbox.cshtml
                      @Html.Partial(string.Format(@"FormEditor/FieldsSync/{0}", field.Type), field)
                    }
                  </div>
                }
              </div>
            }
          </div>
        }
        @* paging links *@
        <nav>
          <ul class="pager">
            <li class="previous form-btn-previous" style="display: none">
              <a href="javascript:;">
                <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span> @Umbraco.Coalesce(Umbraco.GetDictionaryValue("form.paging.previous"), "Previous")
              </a>
            </li>
            <li class="next form-btn-next" style="display: none">
              <a href="javascript:;">
                @Umbraco.Coalesce(Umbraco.GetDictionaryValue("form.paging.next"), "Next") <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
              </a>
            </li>
          </ul>
        </nav>
        @* form validation errors container (for cross field validations) *@
        <div class="row">
          <div class="cell">
            <div class="form-group">
              <div id="validationErrors" class="alert alert-danger @(form.Validations.Any(v => v.Invalid) ? null : "hide")">
                <h4>
                  <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                  @Umbraco.Coalesce(Umbraco.GetDictionaryValue("form.validationerrors.header"), "Form contains errors")
                </h4>
                <ul id="validationErrorsList">
                  @foreach(var invalidValidation in form.Validations.Where(v => v.Invalid))
                  {
                    <li>@invalidValidation.ErrorMessage</li>
                  }
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>

    @* include jQuery *@
    <script src="https://code.jquery.com/jquery-2.1.4.min.js" type="text/javascript"></script>

    @* include Form Editor script for synchronous postback (using jQuery) *@
    <script src="/JS/FormEditor/FormEditorSync.js" type="text/javascript"></script>

    @* this script section sets up state for the JS and thus needs to be a part of the template *@
    <script type="text/javascript">
      @* render the form validations as an array of JSON objects *@
      var _formValidations = @form.Validations.Render();

      @* the total number of form pages *@
      var _formTotalPages = @form.Pages.Count();
    </script>
  }
</body>
</html>
